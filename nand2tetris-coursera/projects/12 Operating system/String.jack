// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
// github.com/kmanzana/nand2tetris/blob/master/projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 * 
 * following keys for reference:
 * new line = 128 = String.newline()
 * backspace = 129 = String.backspace()
 * left arrow = 130
 * up arrow = 131
 * right arrow = 132
 * down arrow = 133
 * home = 134
 * End = 135
 * page up = 136
 * page down = 137
 * insert = 138
 * delete = 139
 * ESC = 140
 * F1 - F12 = 141 - 152
 */

class String {
    /** 
     * makes sense to implement string as array of char values
     * and the other field is the actual length of the string
     */
	field Array str;
	field int length;
	field int max_len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
	if (maxLength = 0) {
		let maxLength = 1;
	} // error catch
	let str = Array.new(maxLength);
	let length = 0;
	let max_len = maxLength;
	return this;
    }

    /** Disposes this string. */
    method void dispose() {
	do Memory.deAlloc(str);
	return;
    }

    /** Returns the current length of this string. */
    method int length() {
	return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
	if ((j < 0) | (j > (length - 1))) {
		do Sys.error(10);  // index out of bounds; think the num is arbitrary
	}
	return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
	if ((j < 0) | (j > (length - 1))) {
		do Sys.error(11);  // index out of bounds; think the num is arbitrary
	}
	let str[j] = c;
	return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
	if (length = max_len) {
		do Sys.error(12);  // str full
	}
	let str[length] = c;  // 0 indexed
	let length = length + 1;
	return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
	if (length > 0) {
		let length = length - 1;
		let str[length] = 0;
	}
	return;
    }

    /**
     * Returns the integer value of this string, 
     *  until a non-digit character is detected. 
     * 
     * e.g. Want to turn ASCII codes of 1, 2, 3 for "123" into int
     * Move from left to right, take the ASCII code, convert to int by subtracting 48
     * For the next char, we take what we had before, multiply by 10, and add to this char value
     *
     */
    method int intValue() {
	var int val;
	var int i;
	var int digit;  // integer value of str[i]
	var boolean neg;

	let val = 0;
	let i = 0;  // initialise result and loop vars

	if ((length > 0) & (str[0] = 45)) {  // - sign
		let neg = true;
		let i = 1;
	}
	else {
		let neg = false;
	}
	
	while (i < length) {
		let digit = str[i] - 48;  // ASCII conversion
		let val = val * 10 + digit;  // account for previous lefthandside digits
		let i = i + 1;
	}

	if (neg) {
		return -val;
	}
	else {
		return val;
	}
    }

    /**
     * Sets this string to hold a representation of the given value. 
     * 
     * Let's say we want to convert 123 as int, to a string
     * Want to start w/ right most digit
     * We extract right most digit by applying modulo ten
     * And then take the character that represents that digit
     * http://www.asciitable.com/
     * 0 starts at idx 48, so we'll add 48 to the value
     *
     * We'll divide the number by 10, integer division
     * which gives us "12" to work with, and now we apply same algo
     * apply recursively to keep chopping numbers and getting right most digit
     */
    method void setInt(int val) {
	var char c;  // character representing lastDigit
	var int num;  // int representing val divided by 10
	
	let length = 0;  // clear the string

	if (val < 0) {
		let val = -val;
		do appendChar(45);  // - sign
	}
	
	let c = Math.mod(val, 10);  // Returns remainder of x / y
	let num = val / 10;  // if val is > 10 case

	if (val < 10) {
		do appendChar(c);  // for any vals < 10 can just append directly
	}
 	else {
		do setInt(num);
		do appendChar(c);
	}
	return;
    }

    /** Returns the new line character. Value per above */
    function char newLine() {
	return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
	return 129;
    }

    /**
     * Returns the double quote (") character. 
     * ASCII code is 34 https://theasciicode.com.ar/ascii-printable-characters/double-quotes-quotation-mark-speech-marks-ascii-code-34.html
     */
    function char doubleQuote() {
	return 34;
    }
}
