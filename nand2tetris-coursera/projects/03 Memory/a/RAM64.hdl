// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 * 
 * We have an 8 register version with RAM8
 * Repeat for this 64 register
 * address can be from 000000 to 111111
 * read from right to left, address[3..5] tells us which RAM8 to use 
 * there are 8 permuations for any 3 bits from 000, 001, 010, 011, 100, 101, 110, 111
 * and we can use address[0..2] to tell us within each RAM8 which register
 * I think we could switch this around too, but unsure
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[3..5], a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);
   
    // At this point only one of the loads is 1, rest 0
    RAM8(in=in, load=a, address=address[0..2], out=outa);
    RAM8(in=in, load=b, address=address[0..2], out=outb);
    RAM8(in=in, load=c, address=address[0..2], out=outc);
    RAM8(in=in, load=d, address=address[0..2], out=outd);
    RAM8(in=in, load=e, address=address[0..2], out=oute);
    RAM8(in=in, load=f, address=address[0..2], out=outf);
    RAM8(in=in, load=g, address=address[0..2], out=outg);
    RAM8(in=in, load=h, address=address[0..2], out=outh);

    // At this point only one of the outX is a loaded value
    // sel is the same as when we DMux
    Mux8Way16(a=outa, b=outb, c=outc, d=outd, e=oute, f=outf, g=outg, h=outh, sel=address[3..5], out=out);

}